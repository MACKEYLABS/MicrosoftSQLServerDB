1.	The head DBA has requested the creation of a sequence for the primary key columns of the Criminals and Crimes tables. After creating the sequences, add a new criminal named Manie Capella to the Criminals table by using the correct sequence. 
(Use any values for the remainder of columns.) 

--CityJailDB was already selected in MS SQL Management Studio
CREATE SEQUENCE criminals_criminal_Id_sq
START WITH 1031
INCREMENT BY 1
NO CACHE 
NO CYCLE
BEGIN TRANSACTION
COMMIT;

INSERT INTO criminals (criminal_id, last, first, street, city, state, zip, phone, 
v_status, p_status)
VALUES(NEXT VALUE FOR criminals_criminal_Id_sq, 'Capella','Manie','6018 Hardrock Circle','Orlando','FL',
'32819','3212221111','N','N');
BEGIN TRANSACTION
COMMIT;


2.	A crime needs to be added for the criminal, too. Add a row to the Crimes table, referencing the sequence value already generated for the Criminal_ID and using the correct sequence to generate the Crime_ID value. 
(Use any values for th
e remainder of columns.)

--CityJailDB was already selected in MS SQL Management Studio
CREATE SEQUENCE crime_crimeid_sq
START WITH 10095
INCREMENT BY 1
NO CYCLE
NO CACHE
BEGIN TRANSACTION
COMMIT;

INSERT INTO crimes
VALUES(NEXT VALUE FOR crime_crimeid_sq,CONVERT(int,(SELECT current_value FROM sys.sequences 
WHERE name = 'criminals_criminal_Id_sq')), 'M',GETDATE(),'CA',GETDATE() + 2,GETDATE() + 4,GETDATE());


3.	The last name, street, and phone number columns of the Criminals table are used quite often in the WHERE clause condition of queries. Create objects that might improve data retrieval for these queries.

--Data retrieval is only sped up by indexes (clustered/nonclustered) I decided to use a 
--non-clustered index on these queries. Although the database is not very large,
--these objects COULD improve data retrieval if the database was larger.
--cityjaildb was already selected in MS SQL studio
CREATE INDEX last_name_index
ON criminals(last);


CREATE INDEX criminals_street_index
ON criminals(street);


CREATE INDEX criminals_phone_index
ON criminals(phone);



4.	Would a bitmap index be appropriate for any columns in the City Jail database (assuming the columns are used in search and/or sort operations)? If so, identify the columns and explain why a bitmap index is appropriate for them.

First and foremost, bitmap indexes are exclusively only used in Oracle databases, but I will discuss the benefits of clustered and nonclustered indexes. The clustered index is implemented as a B-tree index structure that supports fast retrieval of the rows, based on their clustered index key values which is usually tied to the Primary Key. The nonclustered index contains the nonclustered key value and a row locator. This locator points to the data row in the clustered index or heap having the key value. 
I could not find any examples where an index could efficiently speed up this City Jail database at its current size, however it was also noted that indexes are not efficient if more than 5% of the rows would be returned by a query. I used several where clauses in checking the criminals table to check if there were any speed difference within the execution plan for clustered and nonclustered indexes. I did not see any change in speed on the queries when testing different specified where clasues. However, if this database were to grow, this could change dramatically. 
