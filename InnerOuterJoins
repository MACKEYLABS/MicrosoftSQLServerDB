
1.	List all criminals along with the crime charges filed. The report needs to include the criminal ID, name, crime code, and fine amount.

--I added ORDER BY criminal_id to clean up the report. 
SELECT c.criminal_id, CONCAT(first, ' ', last) AS name, crime_code, fine_amount
FROM crime_charges cc, criminals cr, crimes c
WHERE cc.crime_id = c.crime_id
AND c.criminal_id = cr.criminal_id
ORDER BY criminal_id;

2.	List all criminals along with crime status and appeal status (if applicable). The reports need to include the criminal ID, name, crime classification, date charged, appeal filing date, and appeal status. Show all criminals, regardless of whether they have filed an appeal.

--I additionally added a ORDER BY criminal_id to clean up the report. 
SELECT cr.criminal_id, CONCAT(first, ' ', last) AS name, 
classification, date_charged, filing_date, a.status
FROM criminals cr JOIN crimes c
ON c.criminal_id = cr.criminal_id
LEFT JOIN appeals a 
ON a.crime_id = c.crime_id
ORDER BY criminal_id;


3.	List all criminals along with crime information. The report needs to include the criminal ID, name, crime classification, date charged, crime code, and fine amount. Include only crimes classified as “Other.” Sort the list by criminal ID and date charged.

SELECT cr.criminal_id, CONCAT(first, ' ',last) AS name, 
c.classification, c.date_charged, crime_code, fine_amount
FROM criminals cr LEFT JOIN crimes c
ON c.criminal_id = cr.criminal_id
JOIN crime_charges cc
ON c.crime_id = cc.crime_id
WHERE c.classification = 'o'
ORDER BY criminal_id, date_charged



4.	Create an alphabetical list of all criminals, including criminal ID, name, violent offender status, parole status, and any known aliases.

SELECT c.criminal_id, CONCAT(first, ' ', last) AS name, 
v_status, p_status, alias
FROM criminals c LEFT JOIN aliases a
ON a.criminal_id = c.criminal_id
ORDER BY NAME asc;


5.	A table named Prob_Contact contains the required frequency of contact with a probation officer, based on the length of the probation period (the number of days assigned to probation). Review the data in this table, which indicates ranges for the number of days and applicable contact frequencies. Create a list containing the name of each criminal who has been assigned a probation period, which is indicated by the sentence type. The list should contain the criminal name, probation start date, probation end date, and required frequency of contact. Sort the list by criminal name and probation start date.

SELECT CONCAT(first, ' ', last) AS name, start_date,
end_date, con_freq
FROM criminals c JOIN sentences s
ON s.type = 'P'
AND s.criminal_id = c.criminal_id
JOIN prob_contact pc
ON DATEDIFF(day,start_date,end_date) >= low_amt 
AND DATEDIFF(day,start_date,end_date) <= high_amt 
ORDER BY name, start_date;


6.	 A column named Mgr_ID has been added to the Prob_Officers table and contains the ID number of the probation supervisor for each officer. Produce a list showing each probation officer’s name and his or her supervisor’s name. Sort the list alphabetically by probation officer name.

--I created a name by adding first and last together. 
SELECT CONCAT(em.last,' ', em.first) AS Prob_Officer_name, 
CONCAT(mgr.last, ' ',mgr.first) AS Prob_Officer_Suprv
FROM prob_officers em, prob_officers mgr
WHERE em.mgr_id = mgr.prob_id
ORDER BY Prob_Officer_name;
